//https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node19.html
//http://digital.ni.com/public.nsf/allkb/83894C96C792DA9E86256C36005D188F
//http://cui.unige.ch/db-research/Enseignement/analyseinfo/AboutBNF.html 


--TIPOS--
<type> ::= int | boolean | string | char

<integer> ::= <digit> {<digit>}*

<boolean> ::= true | false

<variable> ::= <char> {<char>}*

<string> ::= "<char> {<char>}*"

<char> ::= <letter>  |  <digit>

<letter> ::= a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z

<digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<floating_point_number> ::= {<sign>} {<digit>}* <decimal-point> {<digit>}* {<exponent>} | {<sign>} {<digit>}+ {<decimal-point> {<digit>}*} <exponent>

<exponent> ::= <exponent-marker> <sign> {<digit>}+

<exponent-marker> ::= e | E 


--OPERADORES--
<sign> ::= + | -

<arithmetic_operators> ::= + | - | * | /  

<relational_operators> ::= < | > | == 

<binary_logical_operators> ::= and | or

<single_logical_operators> ::= not

<decimal-point> ::= .


--STATEMENTS SIMPLES--
<statement> ::= <if_statement> | <do_while_statement> | <variable_assign> | <call_function>

<expression_boolean_value> ::= <integer> | <char> | <boolean> | <variable>

<expression_boolean> ::= <expression_boolean_value> <relational_operators> <expression_boolean_value> //boolean and boolean

<logical_boolean_expression> ::= <expression_boolean> <binary_logical_operator> <expression_boolean> | <single_logical_operators> <expression_boolean>

<operation_value> = <variable> | <integer>

<operation> ::= <operation_value> <arithmetic_operators> <operation_value>

<variable_assign> ::=  <type> <variable> = [<operation> | <expression_boolean> | <logical_boolean_expression>] ;

<if_statement> ::= if [ <expression_boolean> | <logical_boolean_expression> ] then <statement> end

<do_while_statement> ::= do {<statement>}* while [ <expression_boolean> | <logical_boolean_expression> ] end

<function_name> ::= <char> {<char>}*

<call_function> ::= call <function_name>;

<main_function> ::= function main() start {<statement>}* endfunction

<function> ::= function <function_name> start {<statement>}* endfunction

